<!-- views/course.ejs -->
<!DOCTYPE html>
<html lang="en">
  <%- include('partials/head') %>
<body>
  <%- include('partials/nav') %>

  <main>
    <div class="course-container">
      <div class="course-header">
        <div class="course-banner" style="background-image: url('<%= course.coverImage %>')">
          <div class="course-banner-overlay">
            <h2><%= course.title %></h2>
            <p class="course-code">Course Code: <%= course.code %></p>
            <p class="course-instructor">Instructor: <%= course.instructor.name %></p>
          </div>
        </div>
      </div>
      
      <div class="course-nav">
        <ul>
          <li><a href="#overview" class="active" data-section="overview">Overview</a></li>
          <li><a href="#modules" data-section="modules">Modules</a></li>
          <li><a href="#discussions" data-section="discussions">Discussions</a></li>
          <li><a href="#participants" data-section="participants">Participants</a></li>
        </ul>
      </div>
      
      <div class="course-sections">
        <!-- Overview Section -->
        <section id="overview" class="course-section active">
          <h3>Course Overview</h3>
          <div class="course-description">
            <p><%= course.description %></p>
          </div>
          
          <div class="course-stats">
            <div class="stat">
              <span class="stat-number"><%= course.students.length %></span>
              <span class="stat-label">Students Enrolled</span>
            </div>
            <div class="stat">
              <span class="stat-number"><%= course.modules.length %></span>
              <span class="stat-label">Modules</span>
            </div>
            <% 
              let resourceCount = 0;
              course.modules.forEach(module => {
                resourceCount += module.resources.length;
              });
            %>
            <div class="stat">
              <span class="stat-number"><%= resourceCount %></span>
              <span class="stat-label">Resources</span>
            </div>
          </div>
        </section>
        
        <!-- Modules Section -->
        <section id="modules" class="course-section">
          <div class="section-header">
            <h3>Course Modules</h3>
            <% if (isInstructor) { %>
              <button class="btn small" id="add-module-btn">Add Module</button>
            <% } %>
          </div>
          
          <div class="modules-list">
            <% if (course.modules.length === 0) { %>
              <p class="empty-message">No modules have been added to this course yet.</p>
            <% } else { %>
              <% course.modules.forEach((module, index) => { %>
                <div class="module-item">
                  <div class="module-header">
                    <h4><%= module.title %></h4>
                    <span class="toggle-module">+</span>
                  </div>
                  <div class="module-content">
                    <p><%= module.description %></p>
                    
                    <% if (module.resources.length > 0) { %>
                      <h5>Resources</h5>
                      <ul class="resources-list">
                        <% module.resources.forEach(resource => { %>
                          <li class="resource-item <%= resource.type %>">
                            <span class="resource-icon"><%= getResourceIcon(resource.type) %></span>
                            <a href="#" class="resource-link"><%= resource.title %></a>
                            <% if (resource.dueDate) { %>
                              <span class="resource-due">Due: <%= formatDate(resource.dueDate) %></span>
                            <% } %>
                          </li>
                        <% }); %>
                      </ul>
                    <% } else { %>
                      <p class="empty-message">No resources in this module.</p>
                    <% } %>
                    
                    <% if (isInstructor) { %>
                      <div class="module-actions">
                        <button class="btn small secondary add-resource" data-module="<%= index %>">Add Resource</button>
                        <button class="btn small danger delete-module" data-module="<%= index %>">Delete Module</button>
                      </div>
                    <% } %>
                  </div>
                </div>
              <% }); %>
            <% } %>
          </div>
        </section>
        
        <!-- Discussions Section -->
        <section id="discussions" class="course-section">
          <h3>Course Discussions</h3>
          <p class="empty-message">This feature is coming soon!</p>
        </section>
        
        <!-- Participants Section -->
        <section id="participants" class="course-section">
          <h3>Course Participants</h3>
          
          <div class="participants-list">
            <div class="participants-header">
              <h4>Instructor</h4>
            </div>
            <div class="instructor-info">
              <div class="participant-item">
                <div class="participant-avatar">
                  <%= course.instructor.name.charAt(0).toUpperCase() %>
                </div>
                <div class="participant-details">
                  <p class="participant-name"><%= course.instructor.name %></p>
                  <p class="participant-email"><%= course.instructor.email %></p>
                </div>
              </div>
            </div>
            
            <% if (course.students.length > 0) { %>
              <div class="participants-header">
                <h4>Students (<%= course.students.length %>)</h4>
              </div>
              <div class="students-list">
                <% course.students.forEach(student => { %>
                  <div class="participant-item">
                    <div class="participant-avatar">
                      <%= student.name.charAt(0).toUpperCase() %>
                    </div>
                    <div class="participant-details">
                      <p class="participant-name"><%= student.name %></p>
                      <p class="participant-email"><%= student.email %></p>
                    </div>
                  </div>
                <% }); %>
              </div>
            <% } else { %>
              <div class="participants-header">
                <h4>Students (0)</h4>
                <p class="empty-message">No students have enrolled in this course yet.</p>
              </div>
            <% } %>
          </div>
        </section>
      </div>
    </div>
  </main>
  
  <!-- Modal for Adding Module -->
  <% if (isInstructor) { %>
    <div id="add-module-modal" class="modal">
      <div class="modal-content">
        <span class="close" id="close-module-modal">&times;</span>
        <h3>Add New Module</h3>
        <form id="add-module-form">
          <div class="form-group">
            <label for="module-title">Module Title</label>
            <input type="text" id="module-title" name="title" required>
          </div>
          <div class="form-group">
            <label for="module-description">Module Description</label>
            <textarea id="module-description" name="description" rows="4" required></textarea>
          </div>
          <button type="submit" class="btn">Add Module</button>
        </form>
      </div>
    </div>
    
    <!-- Modal for Adding Resource -->
    <div id="add-resource-modal" class="modal">
      <div class="modal-content">
        <span class="close" id="close-resource-modal">&times;</span>
        <h3>Add New Resource</h3>
        <form id="add-resource-form">
          <input type="hidden" id="module-index" name="moduleIndex">
          <div class="form-group">
            <label for="resource-title">Resource Title</label>
            <input type="text" id="resource-title" name="title" required>
          </div>
          <div class="form-group">
            <label for="resource-type">Resource Type</label>
            <select id="resource-type" name="type" required>
              <option value="document">Document</option>
              <option value="video">Video</option>
              <option value="assignment">Assignment</option>
              <option value="quiz">Quiz</option>
              <option value="link">Link</option>
            </select>
          </div>
          <div class="form-group" id="content-field">
            <label for="resource-content">Content</label>
            <textarea id="resource-content" name="content" rows="4"></textarea>
            <p class="form-help">For documents and assignments, add content here.</p>
          </div>
          <div class="form-group" id="url-field">
            <label for="resource-url">File/URL</label>
            <input type="text" id="resource-url" name="fileUrl" placeholder="https://example.com/file.pdf">
            <p class="form-help">For videos and links, add URL here.</p>
          </div>
          <div class="form-group" id="due-date-field">
            <label for="resource-due-date">Due Date</label>
            <input type="datetime-local" id="resource-due-date" name="dueDate">
            <p class="form-help">For assignments and quizzes, add due date (optional).</p>
          </div>
          <button type="submit" class="btn">Add Resource</button>
        </form>
      </div>
    </div>
  <% } %>

  <footer>
    <p>&copy; 2025 Collaborative Learning Platform</p>
  </footer>

  <script>
    // DOM Elements
    const courseNav = document.querySelector('.course-nav');
    const courseNavLinks = courseNav.querySelectorAll('a');
    const courseSections = document.querySelectorAll('.course-section');
    const moduleToggles = document.querySelectorAll('.toggle-module');
    
    // Add Module elements
    if (isInstructor) { 
      const addModuleBtn = document.getElementById('add-module-btn');
      const addModuleModal = document.getElementById('add-module-modal');
      const closeModuleModal = document.getElementById('close-module-modal');
      const addModuleForm = document.getElementById('add-module-form');
      
      const addResourceModal = document.getElementById('add-resource-modal');
      const closeResourceModal = document.getElementById('close-resource-modal');
      const addResourceBtns = document.querySelectorAll('.add-resource');
      const addResourceForm = document.getElementById('add-resource-form');
      const resourceTypeSelect = document.getElementById('resource-type');
      const contentField = document.getElementById('content-field');
      const urlField = document.getElementById('url-field');
      const dueDateField = document.getElementById('due-date-field');
      const deleteModuleBtns = document.querySelectorAll('.delete-module');
     }
    
    // Section navigation
    courseNavLinks.forEach(link => {
      link.addEventListener('click', (e) => {
        e.preventDefault();
        
        // Remove active class from all links and sections
        courseNavLinks.forEach(navLink => navLink.classList.remove('active'));
        courseSections.forEach(section => section.classList.remove('active'));
        
        // Add active class to clicked link
        link.classList.add('active');
        
        // Get the section ID from data attribute
        const sectionId = link.getAttribute('data-section');
        
        // Add active class to corresponding section
        document.getElementById(sectionId).classList.add('active');
      });
    });
    
    // Module toggle
    moduleToggles.forEach(toggle => {
      toggle.addEventListener('click', () => {
        const moduleContent = toggle.parentElement.nextElementSibling;
        
        if (moduleContent.style.display === 'block') {
          moduleContent.style.display = 'none';
          toggle.textContent = '+';
        } else {
          moduleContent.style.display = 'block';
          toggle.textContent = '-';
        }
      });
    });
    
    if (isInstructor) {
      // Add Module Modal
      addModuleBtn.addEventListener('click', () => {
        addModuleModal.style.display = 'block';
      });
      
      closeModuleModal.addEventListener('click', () => {
        addModuleModal.style.display = 'none';
      });
      
      window.addEventListener('click', (e) => {
        if (e.target === addModuleModal) {
          addModuleModal.style.display = 'none';
        }
        if (e.target === addResourceModal) {
          addResourceModal.style.display = 'none';
        }
      });
      
      // Add Module Form Submission
      addModuleForm.addEventListener('submit', async (e) => {
        e.preventDefault();
        
        const moduleTitle = document.getElementById('module-title').value;
        const moduleDescription = document.getElementById('module-description').value;
        
        try {
          const response = await fetch(`/api/courses/<%= course._id %>/modules`, {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json'
            },
            body: JSON.stringify({
              title: moduleTitle,
              description: moduleDescription
            })
          });
          
          const data = await response.json();
          
          if (data.success) {
            alert('Module added successfully!');
            window.location.reload();
          } else {
            alert(data.message || 'Failed to add module');
          }
        } catch (error) {
          console.error('Error:', error);
          alert('An error occurred while adding the module');
        }
      });
      
      // Add Resource Modal
      addResourceBtns.forEach(btn => {
        btn.addEventListener('click', () => {
          document.getElementById('module-index').value = btn.getAttribute('data-module');
          addResourceModal.style.display = 'block';
        });
      });
      
      closeResourceModal.addEventListener('click', () => {
        addResourceModal.style.display = 'none';
      });
      
      // Resource type change
      resourceTypeSelect.addEventListener('change', () => {
        const resourceType = resourceTypeSelect.value;
        
        // Show/hide fields based on resource type
        switch (resourceType) {
          case 'document':
            contentField.style.display = 'block';
            urlField.style.display = 'none';
            dueDateField.style.display = 'none';
            break;
          case 'video':
          case 'link':
            contentField.style.display = 'none';
            urlField.style.display = 'block';
            dueDateField.style.display = 'none';
            break;
          case 'assignment':
          case 'quiz':
            contentField.style.display = 'block';
            urlField.style.display = 'none';
            dueDateField.style.display = 'block';
            break;
        }
      });
      
      // Add Resource Form Submission
      addResourceForm.addEventListener('submit', async (e) => {
        e.preventDefault();
        
        const moduleIndex = document.getElementById('module-index').value;
        const resourceTitle = document.getElementById('resource-title').value;
        const resourceType = document.getElementById('resource-type').value;
        const resourceContent = document.getElementById('resource-content').value;
        const resourceUrl = document.getElementById('resource-url').value;
        const resourceDueDate = document.getElementById('resource-due-date').value;
        
        const resourceData = {
          title: resourceTitle,
          type: resourceType
        };
        
        if (resourceType === 'document' || resourceType === 'assignment' || resourceType === 'quiz') {
          resourceData.content = resourceContent;
        }
        
        if (resourceType === 'video' || resourceType === 'link') {
          resourceData.fileUrl = resourceUrl;
        }
        
        if ((resourceType === 'assignment' || resourceType === 'quiz') && resourceDueDate) {
          resourceData.dueDate = resourceDueDate;
        }
        
        try {
          const response = await fetch(`/api/courses/<%= course._id %>/modules/${moduleIndex}/resources`, {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json'
            },
            body: JSON.stringify(resourceData)
          });
          
          const data = await response.json();
          
          if (data.success) {
            alert('Resource added successfully!');
            window.location.reload();
          } else {
            alert(data.message || 'Failed to add resource');
          }
        } catch (error) {
          console.error('Error:', error);
          alert('An error occurred while adding the resource');
        }
      });
      
      // Delete Module
      deleteModuleBtns.forEach(btn => {
        btn.addEventListener('click', async () => {
          if (confirm('Are you sure you want to delete this module and all its resources?')) {
            const moduleIndex = btn.getAttribute('data-module');
            
            try {
              const response = await fetch(`/api/courses/<%= course._id %>/modules/${moduleIndex}`, {
                method: 'DELETE',
                headers: {
                  'Content-Type': 'application/json'
                }
              });
              
              const data = await response.json();
              
              if (data.success) {
                alert('Module deleted successfully!');
                window.location.reload();
              } else {
                alert(data.message || 'Failed to delete module');
              }
            } catch (error) {
              console.error('Error:', error);
              alert('An error occurred while deleting the module');
            }
          }
        });
      });
    }
    
    // Logout handler
    document.getElementById('logout-link').addEventListener('click', async (e) => {
      e.preventDefault();
      
      try {
        const response = await fetch('/api/auth/logout', {
          method: 'GET',
          headers: {
            'Content-Type': 'application/json'
          }
        });

        const data = await response.json();
        
        if (data.success) {
          window.location.href = '/';
        }
      } catch (error) {
        console.error('Error:', error);
        alert('An error occurred during logout');
      }
    });
  </script>
</body>
</html>

            