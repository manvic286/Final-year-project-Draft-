<!-- views/courses.ejs -->
<!DOCTYPE html>
<html lang="en">
  <%- include('partials/head') %>
<body>
  <%- include('partials/nav') %>

  <main>
    <div class="courses-container">
      <div class="courses-header">
        <h2>Available Courses</h2>
        <div class="courses-actions">
          <% if (user.role === 'teacher' || user.role === 'admin') { %>
            <a href="/courses/create" class="btn">Create New Course</a>
          <% } %>
          <button class="btn secondary" id="join-course-btn">Join Course</button>
        </div>
      </div>

      <div class="course-filter">
        <input type="text" id="course-search" placeholder="Search courses...">
        <select id="course-sort">
          <option value="newest">Newest First</option>
          <option value="oldest">Oldest First</option>
          <option value="title">Title (A-Z)</option>
        </select>
      </div>

      <div class="courses-grid" id="courses-grid">
        <!-- Courses will be loaded dynamically -->
      </div>

      <div class="pagination" id="pagination">
        <!-- Pagination controls will be added dynamically -->
      </div>
    </div>

    <!-- Join Course Modal -->
    <div id="join-modal" class="modal">
      <div class="modal-content">
        <span class="close">&times;</span>
        <h3>Join a Course</h3>
        <p>Enter the course code provided by your instructor:</p>
        <form id="join-course-form">
          <input type="text" id="course-code" placeholder="Enter course code" required>
          <button type="submit" class="btn">Join Course</button>
        </form>
      </div>
    </div>
  </main>

  <footer>
    <p>&copy; 2025 Collaborative Learning Platform</p>
  </footer>

  <script>
    // Variables
    let currentPage = 1;
    const limit = 6;
    let totalPages = 0;
    
    // DOM Elements
    const coursesGrid = document.getElementById('courses-grid');
    const pagination = document.getElementById('pagination');
    const courseSearch = document.getElementById('course-search');
    const courseSort = document.getElementById('course-sort');
    const joinModal = document.getElementById('join-modal');
    const joinBtn = document.getElementById('join-course-btn');
    const closeModal = document.querySelector('.close');
    const joinCourseForm = document.getElementById('join-course-form');
    
    // Load courses when page loads
    document.addEventListener('DOMContentLoaded', () => {
      loadCourses();
    });
    
    // Search and sort events
    courseSearch.addEventListener('input', () => {
      currentPage = 1;
      loadCourses();
    });
    
    courseSort.addEventListener('change', () => {
      currentPage = 1;
      loadCourses();
    });
    
    // Modal events
    joinBtn.addEventListener('click', () => {
      joinModal.style.display = 'block';
    });
    
    closeModal.addEventListener('click', () => {
      joinModal.style.display = 'none';
    });
    
    window.addEventListener('click', (e) => {
      if (e.target === joinModal) {
        joinModal.style.display = 'none';
      }
    });
    
    // Join course form submission
    joinCourseForm.addEventListener('submit', async (e) => {
      e.preventDefault();
      const courseCode = document.getElementById('course-code').value;
      
      try {
        const response = await fetch('/api/courses/join', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json'
          },
          body: JSON.stringify({ courseCode })
        });
        
        const data = await response.json();
        
        if (data.success) {
          alert('Successfully joined the course!');
          window.location.href = `/courses/${data.data._id}`;
        } else {
          alert(data.message || 'Failed to join course');
        }
      } catch (error) {
        console.error('Error:', error);
        alert('An error occurred while joining the course');
      }
    });
    
    // Load courses function
    async function loadCourses() {
      const searchTerm = courseSearch.value;
      const sortOption = courseSort.value;
      
      let url = `/api/courses?page=${currentPage}&limit=${limit}`;
      
      if (searchTerm) {
        url += `&title[regex]=${searchTerm}&title[options]=i`;
      }
      
      if (sortOption === 'oldest') {
        url += '&sort=createdAt';
      } else if (sortOption === 'title') {
        url += '&sort=title';
      } else {
        url += '&sort=-createdAt';
      }
      
      try {
        const response = await fetch(url);
        const data = await response.json();
        
        if (data.success) {
          displayCourses(data.data);
          createPagination(data.pagination);
          totalPages = Math.ceil(data.count / limit);
        } else {
          coursesGrid.innerHTML = '<p class="error">Failed to load courses</p>';
        }
      } catch (error) {
        console.error('Error:', error);
        coursesGrid.innerHTML = '<p class="error">An error occurred while loading courses</p>';
      }
    }
    
    // Display courses function
    function displayCourses(courses) {
      if (courses.length === 0) {
        coursesGrid.innerHTML = '<p class="no-courses">No courses found.</p>';
        return;
      }
      
      coursesGrid.innerHTML = '';
      
      courses.forEach(course => {
        const courseCard = document.createElement('div');
        courseCard.className = 'course-card';
        
        courseCard.innerHTML = `
          <div class="course-image">
            <img src="${course.coverImage}" alt="${course.title}">
          </div>
          <div class="course-content">
            <h3>${course.title}</h3>
            <p class="course-code">Code: ${course.code}</p>
            <p class="course-instructor">By: ${course.instructor.name}</p>
            <p class="course-description">${course.description.substring(0, 100)}${course.description.length > 100 ? '...' : ''}</p>
            <a href="/courses/${course._id}" class="btn">View Course</a>
          </div>
        `;
        
        coursesGrid.appendChild(courseCard);
      });
    }
    
    // Create pagination function
    function createPagination(paginationData) {
      pagination.innerHTML = '';
      
      if (!paginationData) return;
      
      const paginationList = document.createElement('ul');
      
      // Previous button
      const prevBtn = document.createElement('li');
      prevBtn.innerHTML = '<a href="#">&laquo; Prev</a>';
      if (!paginationData.prev) {
        prevBtn.classList.add('disabled');
      } else {
        prevBtn.addEventListener('click', (e) => {
          e.preventDefault();
          currentPage = paginationData.prev.page;
          loadCourses();
        });
      }
      paginationList.appendChild(prevBtn);
      
      // Page numbers
      for (let i = 1; i <= totalPages; i++) {
        const pageItem = document.createElement('li');
        pageItem.innerHTML = `<a href="#">${i}</a>`;
        
        if (i === currentPage) {
          pageItem.classList.add('active');
        }
        
        pageItem.addEventListener('click', (e) => {
          e.preventDefault();
          currentPage = i;
          loadCourses();
        });
        
        paginationList.appendChild(pageItem);
      }
      
      // Next button
      const nextBtn = document.createElement('li');
      nextBtn.innerHTML = '<a href="#">Next &raquo;</a>';
      if (!paginationData.next) {
        nextBtn.classList.add('disabled');
      } else {
        nextBtn.addEventListener('click', (e) => {
          e.preventDefault();
          currentPage = paginationData.next.page;
          loadCourses();
        });
      }
      paginationList.appendChild(nextBtn);
      
      pagination.appendChild(paginationList);
    }
    
    // Logout handler
    document.getElementById('logout-link').addEventListener('click', async (e) => {
      e.preventDefault();
      
      try {
        const response = await fetch('/api/auth/logout', {
          method: 'GET',
          headers: {
            'Content-Type': 'application/json'
          }
        });

        const data = await response.json();
        
        if (data.success) {
          window.location.href = '/';
        }
      } catch (error) {
        console.error('Error:', error);
        alert('An error occurred during logout');
      }
    });
  </script>
</body>
</html>